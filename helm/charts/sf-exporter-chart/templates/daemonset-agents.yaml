#
# Copyright (C) 2019 IBM Corporation.
#
# Authors:
# Frederico Araujo <frederico.araujo@ibm.com>
# Teryl Taylor <terylt@ibm.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "extensions/v1beta1" }}
apiVersion: extensions/v1beta1
{{- else }}
apiVersion: apps/v1
{{- end }}
kind: DaemonSet
metadata:
  name: {{ template "sysflowagent.fullname" . }}
  labels:
    app: {{ template "sysflowagent.fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ template "sysflowagent.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "sysflowagent.fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        tier: agent
    spec:
      {{- if .Values.resources }}
      resources:
      {{- toYaml .Values.resources | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
      {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.registry.secretName }}
      {{- if ne .Values.registry.secretName ""}}
      imagePullSecrets:
      - name: {{ .Values.registry.secretName }}
      {{- end }}
      {{- end }}
      serviceAccountName: sysflow-service-account
      containers:
      - name: sidecar
        image: kubectl-proxy
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8001
      - name: sfcollector
        image: {{ .Values.sfcollector.repository }}:{{ .Values.sfcollector.tag }}
        imagePullPolicy: {{ .Values.sfcollector.imagePullPolicy | default "" | quote }}
        #command: [ "/bin/bash", "-c", "--" ]
        #args: [ "while true; do sleep 30; done;" ]
        env:
        - name: SYSDIG_LOG
          value: "2"
        - name: FILTER
          value: {{ .Values.sfcollector.filter }}
        - name: INTERVAL
          value: "{{ .Values.sfcollector.interval }}"
        - name: OUTPUT
          value: {{ .Values.sfcollector.outDir }}
        - name: LOCATION
          value: {{ .Values.sfexporter.s3Location }}
        {{- if .Values.sfcollector.k8sAPIURL }}
        - name: SF_K8S_API_URL
          value: {{ .Values.sfcollector.k8sAPIURL }}
        {{- end }}
        {{- if .Values.sfcollector.k8sAPICert }}
        - name: SF_K8S_API_CERT
          value: {{ .Values.sfcollector.k8sAPICert }}
        {{- end }}
        {{- if .Values.sfcollector.ebpf }}
        - name: FALCO_BPF_PROBE
          value: ""
        {{- end }}
        {{- if .Values.sfcollector.dropMode }}
        - name: ENABLE_DROP_MODE
          value: "1"
        {{- end }}
        {{- if .Values.sfcollector.fileOnly }}
        - name: FILE_ONLY
          value: "1"
        {{- end }}
        {{- if .Values.sfcollector.procFlow }}
        - name: ENABLE_PROC_FLOW
          value: "1"
        {{- end }}
        {{- if eq .Values.sfcollector.readMode "1" }}
        - name: FILE_READ_MODE
          value: "1"
        {{- else if eq .Values.sfcollector.readMode "2" }}
        - name: FILE_READ_MODE
          value: "2"
        {{- else }}
        - name: FILE_READ_MODE
          value: "0"
        {{- end }}
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: EXPORTER_ID
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_UUID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        {{- if .Values.sfcollector.criPath }}
        {{- if ne .Values.sfcollector.criPath ""}}
        - name: CRI_PATH
          value: "{{ .Values.sfcollector.criPath }}"
        - name: CRI_TIMEOUT
          value: "5"
        {{- end }}
        {{- end }}
        volumeMounts:
        - mountPath: {{ .Values.sfcollector.outDir }}
          name: data
          readOnly: false
        - mountPath: /host/var/run
          name: varrun
          readOnly: false 
        {{- if (and .Values.sfcollector.ebpf .Values.sfcollector.mountEtc) }}
        - mountPath: /host/etc/VERSION
          name: etc-fs
          readOnly: true
        {{- end }}
        - mountPath: /host/dev
          name: dev
          readOnly: false
        - mountPath: /host/proc
          name: proc
          readOnly: true
        - mountPath: /host/boot
          name: boot
          readOnly: true
        - mountPath: /host/lib/modules
          name: modules
          readOnly: true
        - mountPath: /host/usr
          name: usr
          readOnly: true
        - mountPath: /etc/sysflow
          name: policies-volume
        securityContext:
          privileged: true
      - name: sfexporter
        image: {{ .Values.sfexporter.repository }}:{{ .Values.sfexporter.tag }}
        imagePullPolicy: {{ .Values.sfexporter.imagePullPolicy | default "" | quote }}
        volumeMounts:
        - mountPath: {{ .Values.sfexporter.outDir }}
          name: data
          readOnly: false
        - mountPath: "/run/secrets/k8s"
          name: secrets
          #subPath: k8s
          readOnly: true
        env:
        - name: S3_ENDPOINT
          value: {{ .Values.sfexporter.s3Endpoint }}
        - name: S3_PORT
          value: "{{ .Values.sfexporter.s3Port }}"
        - name: INTERVAL 
          value: "{{ .Values.sfexporter.interval }}"
        - name: S3_BUCKET
          value: {{ .Values.sfexporter.s3Bucket }}
        - name: S3_LOCATION
          value: {{ .Values.sfexporter.s3Location }}
        - name: SECURE
          value: "{{ .Values.sfexporter.s3Secure }}"
        - name: DIR
          value: {{ .Values.sfexporter.outDir }}
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: EXPORTER_ID
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_UUID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
      volumes:
      - name: secrets
        secret:
          secretName: {{ template "sysflowagent.fullname" . }}-secrets
          items:
          - key: s3_access_key
            path: "s3_access_key"
          - key: s3_secret_key
            path: "s3_secret_key"
      {{- if (and .Values.sfcollector.ebpf .Values.sfcollector.mountEtc) }}
      - name: etc-fs
        hostPath:
          path: /etc/VERSION
      {{- end }}
      - name: data
        emptyDir:
          medium: Memory
          sizeLimit: {{ .Values.tmpfsSize }}
      - name: varrun
        hostPath:
          path: /var/run
      - name: dev
        hostPath:
          path: /dev
      - name: proc
        hostPath:
          path: /proc
      - name: boot
        hostPath:
          path: /boot
      - name: modules
        hostPath:
          path: /lib/modules
      - name: usr
        hostPath:
          path: /usr
      - name: policies-volume
        configMap:
          name: sysflow-policies-config
